{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QfZkNLUb4B-p"
      },
      "source": [
        "# ATT Estimation Tutorial\n",
        "\n",
        "This tutorial gives a short example for how to estimate average treatment effect on the treated using machine learning methods"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "dS2X3Bq1-fxE"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import scipy as sp\n",
        "from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import KFold, StratifiedKFold, train_test_split\n",
        "from sklearn.metrics import mean_squared_error, log_loss\n",
        "from xgboost import XGBClassifier, XGBRegressor\n",
        "import sklearn\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.pyplot import hist\n",
        "from tabulate import tabulate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "nxJ46X9cFJ9X"
      },
      "outputs": [],
      "source": [
        "RANDOM_SEED=42\n",
        "np.random.seed(RANDOM_SEED)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CjKmYJkW2YiC"
      },
      "source": [
        "# Import dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "-L-Q9K1V2XWI",
        "outputId": "cb93ea88-1102-40b5-c7fe-dfc50ad9c57d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0  ...1  followup_fallstudyhours  followup_getwritinghelp  \\\n",
              "0              1   186                       20                        2   \n",
              "1              2   830                       12                        2   \n",
              "2              3   837                       21                        3   \n",
              "3              4   952                       57                        2   \n",
              "4              5   261                       20                        1   \n",
              "...          ...   ...                      ...                      ...   \n",
              "1048        1049   737                       15                        5   \n",
              "1049        1050   807                        4                        5   \n",
              "1050        1051   503                       12                        5   \n",
              "1051        1052   900                       30                        5   \n",
              "1052        1053   427                        4                        4   \n",
              "\n",
              "      followup_metwithinstructor  followup_metwithfreetutor  \\\n",
              "0                              2                          0   \n",
              "1                              0                          2   \n",
              "2                              0                          0   \n",
              "3                              0                          0   \n",
              "4                              0                          0   \n",
              "...                          ...                        ...   \n",
              "1048                           1                          2   \n",
              "1049                           0                          0   \n",
              "1050                           1                          0   \n",
              "1051                           5                          2   \n",
              "1052                           0                          2   \n",
              "\n",
              "      followup_imptodowellatuoft  followup_depressed  followup_stressed  \\\n",
              "0                              7                   2                  1   \n",
              "1                              4                   2                  1   \n",
              "2                              6                   3                  3   \n",
              "3                              7                   3                  2   \n",
              "4                              7                   2                  3   \n",
              "...                          ...                 ...                ...   \n",
              "1048                           7                   3                  3   \n",
              "1049                           7                   3                  3   \n",
              "1050                           4                   1                  1   \n",
              "1051                           7                   1                  2   \n",
              "1052                           7                   3                  3   \n",
              "\n",
              "      fathers_education  mothers_education  fall_meangrade_year1  \\\n",
              "0                     1                  1             77.000000   \n",
              "1                     0                  0             73.666664   \n",
              "2                     1                  5             70.000000   \n",
              "3                     1                  1             81.000000   \n",
              "4                     6                  6             81.500000   \n",
              "...                 ...                ...                   ...   \n",
              "1048                  6                  2             81.333336   \n",
              "1049                  6                  6             73.500000   \n",
              "1050                  7                  7             73.000000   \n",
              "1051                  6                  6             79.666664   \n",
              "1052                  6                  6             66.500000   \n",
              "\n",
              "      exp_gradschl  agreeableness2  agreeableness  extraversion2  \\\n",
              "0                1       -0.517853              0      -2.751067   \n",
              "1                0        1.216498              1      -2.751067   \n",
              "2                0        0.831087              1      -2.751067   \n",
              "3                1        1.409204              1      -2.751067   \n",
              "4                1        1.794615              1      -2.591280   \n",
              "...            ...             ...            ...            ...   \n",
              "1048             1        0.252970              1       2.202324   \n",
              "1049             0       -1.095970              0       2.202324   \n",
              "1050             1       -1.866793              0       2.362111   \n",
              "1051             0       -0.710559              0       2.362111   \n",
              "1052             0       -1.095970              0       2.841471   \n",
              "\n",
              "      extraversion  study_habit  \n",
              "0                0            4  \n",
              "1                0            4  \n",
              "2                0            3  \n",
              "3                0            2  \n",
              "4                0            1  \n",
              "...            ...          ...  \n",
              "1048             1            8  \n",
              "1049             1            5  \n",
              "1050             1            6  \n",
              "1051             1           12  \n",
              "1052             1            6  \n",
              "\n",
              "[1053 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-23655cb0-da9d-4c7f-a5a1-805092cd8ab7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>...1</th>\n",
              "      <th>followup_fallstudyhours</th>\n",
              "      <th>followup_getwritinghelp</th>\n",
              "      <th>followup_metwithinstructor</th>\n",
              "      <th>followup_metwithfreetutor</th>\n",
              "      <th>followup_imptodowellatuoft</th>\n",
              "      <th>followup_depressed</th>\n",
              "      <th>followup_stressed</th>\n",
              "      <th>fathers_education</th>\n",
              "      <th>mothers_education</th>\n",
              "      <th>fall_meangrade_year1</th>\n",
              "      <th>exp_gradschl</th>\n",
              "      <th>agreeableness2</th>\n",
              "      <th>agreeableness</th>\n",
              "      <th>extraversion2</th>\n",
              "      <th>extraversion</th>\n",
              "      <th>study_habit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>186</td>\n",
              "      <td>20</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>77.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.517853</td>\n",
              "      <td>0</td>\n",
              "      <td>-2.751067</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>830</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "      <td>0</td>\n",
              "      <td>1.216498</td>\n",
              "      <td>1</td>\n",
              "      <td>-2.751067</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>837</td>\n",
              "      <td>21</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.831087</td>\n",
              "      <td>1</td>\n",
              "      <td>-2.751067</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>952</td>\n",
              "      <td>57</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>81.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>1.409204</td>\n",
              "      <td>1</td>\n",
              "      <td>-2.751067</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>261</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>81.500000</td>\n",
              "      <td>1</td>\n",
              "      <td>1.794615</td>\n",
              "      <td>1</td>\n",
              "      <td>-2.591280</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1048</th>\n",
              "      <td>1049</td>\n",
              "      <td>737</td>\n",
              "      <td>15</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>81.333336</td>\n",
              "      <td>1</td>\n",
              "      <td>0.252970</td>\n",
              "      <td>1</td>\n",
              "      <td>2.202324</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1049</th>\n",
              "      <td>1050</td>\n",
              "      <td>807</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>73.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>-1.095970</td>\n",
              "      <td>0</td>\n",
              "      <td>2.202324</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1050</th>\n",
              "      <td>1051</td>\n",
              "      <td>503</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>73.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>-1.866793</td>\n",
              "      <td>0</td>\n",
              "      <td>2.362111</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1051</th>\n",
              "      <td>1052</td>\n",
              "      <td>900</td>\n",
              "      <td>30</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>79.666664</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.710559</td>\n",
              "      <td>0</td>\n",
              "      <td>2.362111</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1052</th>\n",
              "      <td>1053</td>\n",
              "      <td>427</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>66.500000</td>\n",
              "      <td>0</td>\n",
              "      <td>-1.095970</td>\n",
              "      <td>0</td>\n",
              "      <td>2.841471</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1053 rows × 18 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23655cb0-da9d-4c7f-a5a1-805092cd8ab7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-23655cb0-da9d-4c7f-a5a1-805092cd8ab7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-23655cb0-da9d-4c7f-a5a1-805092cd8ab7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "data = pd.read_csv(\"https://raw.githubusercontent.com/BaichenTan/ExperimentData_Adv/master/dataset_trimmed_extraversion_final.csv\")\n",
        "data\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q57avql1Pu4k"
      },
      "source": [
        "## Counfounders, Outcome, and Treatment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "PHF8AKpy4o4I"
      },
      "outputs": [],
      "source": [
        "#create a dataset of confounders\n",
        "confounders_without_Mediator = data[['fathers_education', 'mothers_education']]\n",
        "confounders_with_allMediators = data[[\"followup_fallstudyhours\", \"followup_imptodowellatuoft\", \"followup_depressed\", \"followup_stressed\", \"fathers_education\",\t\"mothers_education\", \"exp_gradschl\", \"study_habit\"]]\n",
        "confounders_with_mediatorStudyHours = data[[\"followup_fallstudyhours\", \"followup_imptodowellatuoft\", \"followup_depressed\", \"followup_stressed\", \"fathers_education\",\t\"mothers_education\", \"exp_gradschl\"]]\n",
        "confounders_with_mediatorStudyHabits = data[[\"study_habit\",\"followup_imptodowellatuoft\", \"followup_depressed\", \"followup_stressed\", \"fathers_education\",\t\"mothers_education\", \"exp_gradschl\"]]\n",
        "outcome = data['fall_meangrade_year1']\n",
        "treatment = data['extraversion']\n",
        "placebo = data['agreeableness']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C576dWRsa3ad"
      },
      "source": [
        "## Specify Nuisance Function Models\n",
        "\n",
        "The next step is to specify models for the conditional expected outcome and propensity score"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5PmmVpO89glE"
      },
      "source": [
        "## Q model with randomforest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "qyOhSZRQRb8W"
      },
      "outputs": [],
      "source": [
        "# specify a model for the conditional expected outcome\n",
        "\n",
        "# make a function that returns a sklearn model for later use in k-folding\n",
        "def make_Qmodel_randomForest():\n",
        "  return RandomForestRegressor(random_state=RANDOM_SEED, n_estimators=500, max_depth=3)\n",
        "\n",
        "Qmodel_randomForest = make_Qmodel_randomForest()\n",
        "\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gbhY1xyi9WfR"
      },
      "source": [
        "## Q model with linear regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "KlvJEIUb9W1D"
      },
      "outputs": [],
      "source": [
        "def make_Qmodel_linearRegression():\n",
        "  return LinearRegression()\n",
        "\n",
        "Qmodel_LinearRegression = make_Qmodel_linearRegression()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gcyeKSydAr4w"
      },
      "source": [
        "## Q model with XGBoost "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "5hiMWUOgAsMd"
      },
      "outputs": [],
      "source": [
        "def make_Qmodel_XGBoost():\n",
        "  return XGBRegressor(n_jobs=1, objective = \"reg:squarederror\", random_state=RANDOM_SEED)\n",
        "\n",
        "Qmodel_XGBRegressor = make_Qmodel_XGBoost()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pFykT_xgDXKK"
      },
      "source": [
        "## Sanity Check of Qmodel for various confounder conditions"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounders without Mediators"
      ],
      "metadata": {
        "id": "yIn7aRtIFeqR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Qmodel_randomForest = make_Qmodel_randomForest()\n",
        "Qmodel_LinearRegression = make_Qmodel_linearRegression()\n",
        "Qmodel_XGBoost = make_Qmodel_XGBoost()\n",
        "\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "X_w_treatment = confounders_without_Mediator.copy()\n",
        "X_w_treatment[\"treatment\"] = treatment\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_w_treatment, outcome, test_size=0.2)\n",
        "Qmodel_randomForest.fit(X_train, y_train)\n",
        "Qmodel_LinearRegression.fit(X_train, y_train)\n",
        "Qmodel_XGBoost.fit(X_train, y_train)\n",
        "y_pred_RF0 = Qmodel_randomForest.predict(X_test)\n",
        "y_pred_LR0 = Qmodel_LinearRegression.predict(X_test)\n",
        "y_pred_XGB0 = Qmodel_XGBoost.predict(X_test)\n",
        "\n",
        "test_mse_RF0=mean_squared_error(y_pred_RF0, y_test)\n",
        "print(f\"Test MSE of fit model of RandomForest is {test_mse_RF0}\") \n",
        "test_mse_LR0=mean_squared_error(y_pred_LR0, y_test)\n",
        "print(f\"Test MSE of fit model of LogisticRegression is {test_mse_LR0}\")\n",
        "test_mse_XGB0=mean_squared_error(y_pred_XGB0, y_test)\n",
        "print(f\"Test MSE of fit model of XGBoost is {test_mse_XGB0}\")  \n",
        "baseline_mse_0=mean_squared_error(y_train.mean()*np.ones_like(y_test), y_test)\n",
        "print(f\"Test MSE of no-covariate model {baseline_mse_0}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WxSl0LydFk5O",
        "outputId": "3f5e5b9c-0d23-48ea-875e-61502354a5c1"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MSE of fit model of RandomForest is 152.61182268502063\n",
            "Test MSE of fit model of LogisticRegression is 149.5181603180379\n",
            "Test MSE of fit model of XGBoost is 157.87593280805143\n",
            "Test MSE of no-covariate model 151.60195082882802\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounders with both mediators"
      ],
      "metadata": {
        "id": "ALvKeOdnG2Cb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Qmodel_randomForest = make_Qmodel_randomForest()\n",
        "Qmodel_LinearRegression = make_Qmodel_linearRegression()\n",
        "Qmodel_XGBoost = make_Qmodel_XGBoost()\n",
        "\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "X_w_treatment = confounders_with_allMediators.copy()\n",
        "X_w_treatment[\"treatment\"] = treatment\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_w_treatment, outcome, test_size=0.2)\n",
        "Qmodel_randomForest.fit(X_train, y_train)\n",
        "Qmodel_LinearRegression.fit(X_train, y_train)\n",
        "Qmodel_XGBoost.fit(X_train, y_train)\n",
        "y_pred_RF1 = Qmodel_randomForest.predict(X_test)\n",
        "y_pred_LR1 = Qmodel_LinearRegression.predict(X_test)\n",
        "y_pred_XGB1 = Qmodel_XGBoost.predict(X_test)\n",
        "\n",
        "test_mse_RF1=mean_squared_error(y_pred_RF1, y_test)\n",
        "print(f\"Test MSE of fit model of RandomForest is {test_mse_RF1}\") \n",
        "test_mse_LR1=mean_squared_error(y_pred_LR1, y_test)\n",
        "print(f\"Test MSE of fit model of LogisticRegression is {test_mse_LR1}\")\n",
        "test_mse_XGB1=mean_squared_error(y_pred_XGB1, y_test)\n",
        "print(f\"Test MSE of fit model of XGBoost is {test_mse_XGB1}\")  \n",
        "baseline_mse_1=mean_squared_error(y_train.mean()*np.ones_like(y_test), y_test)\n",
        "print(f\"Test MSE of no-covariate model {baseline_mse_1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OT-Q1HtuHZDR",
        "outputId": "8986a42a-39b3-4d4b-8021-84227198e138"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MSE of fit model of RandomForest is 169.40055899282586\n",
            "Test MSE of fit model of LogisticRegression is 168.51074769456227\n",
            "Test MSE of fit model of XGBoost is 181.72313659268914\n",
            "Test MSE of no-covariate model 182.09603897685102\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounders with Mediator StudyHours"
      ],
      "metadata": {
        "id": "syjSf3g8IKXP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Qmodel_randomForest = make_Qmodel_randomForest()\n",
        "Qmodel_LinearRegression = make_Qmodel_linearRegression()\n",
        "Qmodel_XGBoost = make_Qmodel_XGBoost()\n",
        "\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "X_w_treatment = confounders_with_mediatorStudyHours.copy()\n",
        "X_w_treatment[\"treatment\"] = treatment\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_w_treatment, outcome, test_size=0.2)\n",
        "Qmodel_randomForest.fit(X_train, y_train)\n",
        "Qmodel_LinearRegression.fit(X_train, y_train)\n",
        "Qmodel_XGBoost.fit(X_train, y_train)\n",
        "y_pred_RF2 = Qmodel_randomForest.predict(X_test)\n",
        "y_pred_LR2 = Qmodel_LinearRegression.predict(X_test)\n",
        "y_pred_XGB2 = Qmodel_XGBoost.predict(X_test)\n",
        "\n",
        "test_mse_RF2=mean_squared_error(y_pred_RF2, y_test)\n",
        "print(f\"Test MSE of fit model of RandomForest is {test_mse_RF2}\") \n",
        "test_mse_LR2=mean_squared_error(y_pred_LR2, y_test)\n",
        "print(f\"Test MSE of fit model of LogisticRegression is {test_mse_LR2}\")\n",
        "test_mse_XGB2=mean_squared_error(y_pred_XGB2, y_test)\n",
        "print(f\"Test MSE of fit model of XGBoost is {test_mse_XGB2}\")  \n",
        "baseline_mse_2=mean_squared_error(y_train.mean()*np.ones_like(y_test), y_test)\n",
        "print(f\"Test MSE of no-covariate model {baseline_mse_2}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nqe87OyZIPlm",
        "outputId": "5183a9a0-b284-41df-df2b-237c1fbbe1e7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MSE of fit model of RandomForest is 121.74053510688145\n",
            "Test MSE of fit model of LogisticRegression is 121.5828640808898\n",
            "Test MSE of fit model of XGBoost is 127.01489908354753\n",
            "Test MSE of no-covariate model 130.43894336091265\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounders with Mediator StudyHabit"
      ],
      "metadata": {
        "id": "Pa5OA-KfIntI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Qmodel_randomForest = make_Qmodel_randomForest()\n",
        "Qmodel_LinearRegression = make_Qmodel_linearRegression()\n",
        "Qmodel_XGBoost = make_Qmodel_XGBoost()\n",
        "\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "X_w_treatment = confounders_with_mediatorStudyHabits.copy()\n",
        "X_w_treatment[\"treatment\"] = treatment\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_w_treatment, outcome, test_size=0.2)\n",
        "Qmodel_randomForest.fit(X_train, y_train)\n",
        "Qmodel_LinearRegression.fit(X_train, y_train)\n",
        "Qmodel_XGBoost.fit(X_train, y_train)\n",
        "y_pred_RF3 = Qmodel_randomForest.predict(X_test)\n",
        "y_pred_LR3 = Qmodel_LinearRegression.predict(X_test)\n",
        "y_pred_XGB3 = Qmodel_XGBoost.predict(X_test)\n",
        "\n",
        "test_mse_RF3=mean_squared_error(y_pred_RF3, y_test)\n",
        "print(f\"Test MSE of fit model of RandomForest is {test_mse_RF3}\") \n",
        "test_mse_LR3=mean_squared_error(y_pred_LR2, y_test)\n",
        "print(f\"Test MSE of fit model of LogisticRegression is {test_mse_LR3}\")\n",
        "test_mse_XGB3=mean_squared_error(y_pred_XGB3, y_test)\n",
        "print(f\"Test MSE of fit model of XGBoost is {test_mse_XGB3}\")  \n",
        "baseline_mse_3=mean_squared_error(y_train.mean()*np.ones_like(y_test), y_test)\n",
        "print(f\"Test MSE of no-covariate model {baseline_mse_3}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dWkpOxNAIrRN",
        "outputId": "410a32e9-e2ef-41f9-ca9b-cb28ea11545c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test MSE of fit model of RandomForest is 146.63714648602019\n",
            "Test MSE of fit model of LogisticRegression is 160.54813326298006\n",
            "Test MSE of fit model of XGBoost is 155.39814844985017\n",
            "Test MSE of no-covariate model 149.82793023432893\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-jKu1MwyCdCC"
      },
      "source": [
        "## g model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0eaO1Oi3DS8I"
      },
      "source": [
        "### g model with RandomForest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "uq6eZEBXbsaI",
        "outputId": "f0980ea5-11fb-4d3b-b04b-9dc204c01bf3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\n# Sanity check of confounders with mediators\\nX_train, X_test, a_train, a_test = train_test_split(confounders_with_Mediators, treatment, test_size=0.2)\\ngmodel.fit(X_train, a_train)\\na_pred = gmodel.predict_proba(X_test)[:,1]\\n\\ntest_ce=log_loss(a_test, a_pred)\\nprint(f\"Test CE of fit model {test_ce}\") \\nbaseline_ce=log_loss(a_test, a_train.mean()*np.ones_like(a_test))\\nprint(f\"Test CE of no-covariate model {baseline_ce}\")\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "# specify a model for the propensity score\n",
        "\n",
        "def make_gmodel_randomForest():\n",
        "\n",
        "  return RandomForestClassifier(random_state=RANDOM_SEED, n_estimators=500, max_depth=3)\n",
        "\n",
        "gmodel_randomForest = make_gmodel_randomForest()\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "'''\n",
        "# Sanity check of confounders with mediators\n",
        "X_train, X_test, a_train, a_test = train_test_split(confounders_with_Mediators, treatment, test_size=0.2)\n",
        "gmodel.fit(X_train, a_train)\n",
        "a_pred = gmodel.predict_proba(X_test)[:,1]\n",
        "\n",
        "test_ce=log_loss(a_test, a_pred)\n",
        "print(f\"Test CE of fit model {test_ce}\") \n",
        "baseline_ce=log_loss(a_test, a_train.mean()*np.ones_like(a_test))\n",
        "print(f\"Test CE of no-covariate model {baseline_ce}\")\n",
        "'''"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4X3sCNeyC6K0"
      },
      "source": [
        "### g model with logistic regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "dV-pn9FXJrDX"
      },
      "outputs": [],
      "source": [
        "def make_gmodel_logisticRegression():\n",
        "  return LogisticRegression(max_iter=1000)\n",
        "\n",
        "gmodel_LogisticRegression = make_gmodel_logisticRegression()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O-DrXpsQJrW6"
      },
      "source": [
        "### g model with XGBoost"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "7iX9s1VrJriP"
      },
      "outputs": [],
      "source": [
        "def make_gmodel_XGBClassifier():\n",
        "  return XGBClassifier(use_label_encoder=False, n_jobs=1, objective='binary:logistic',eval_metric = 'logloss', random_state =RANDOM_SEED)\n",
        "\n",
        "gmodel_XGBClassifier = make_gmodel_XGBClassifier()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oYvqsja_dhUj"
      },
      "source": [
        "## Sanity Check of gmodel for Various Confounding Conditions"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounder without Mediators"
      ],
      "metadata": {
        "id": "dm3smeI_JvjZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gmodel_randomForest = make_gmodel_randomForest()\n",
        "gmodel_LogisticRegression = make_gmodel_logisticRegression()\n",
        "gmodel_XGBoost = make_gmodel_XGBClassifier()\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "# Sanity check of confounders with mediators\n",
        "X_train, X_test, a_train, a_test = train_test_split(confounders_without_Mediator, treatment, test_size=0.2)\n",
        "gmodel_randomForest.fit(X_train, a_train)\n",
        "gmodel_LogisticRegression.fit(X_train, a_train)\n",
        "gmodel_XGBoost.fit(X_train, a_train)\n",
        "a_pred_RF0 = gmodel_randomForest.predict_proba(X_test)[:,1]\n",
        "a_pred_LR0 = gmodel_LogisticRegression.predict_proba(X_test)[:,1]\n",
        "a_pred_XGB0 = gmodel_XGBoost.predict_proba(X_test)[:,1]\n",
        "\n",
        "test_ce_RF0=log_loss(a_test, a_pred_RF0)\n",
        "print(f\"Test CE of fit model {test_ce_RF0}\") \n",
        "test_ce_LR0=log_loss(a_test, a_pred_LR0)\n",
        "print(f\"Test CE of fit model {test_ce_LR0}\") \n",
        "test_ce_XGB0=log_loss(a_test, a_pred_XGB0)\n",
        "print(f\"Test CE of fit model {test_ce_XGB0}\") \n",
        "baseline_ce_0=log_loss(a_test, a_train.mean()*np.ones_like(a_test))\n",
        "print(f\"Test CE of no-covariate model {baseline_ce_0}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gG5Whi0IJqSt",
        "outputId": "5d781ce4-d144-48a6-d73e-fbfd4af20168"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test CE of fit model 0.6969537907441002\n",
            "Test CE of fit model 0.6901815757070059\n",
            "Test CE of fit model 0.7148464357400958\n",
            "Test CE of no-covariate model 0.6928663894825309\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounder with both Mediators"
      ],
      "metadata": {
        "id": "lTTtyfljKehy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gmodel_randomForest = make_gmodel_randomForest()\n",
        "gmodel_LogisticRegression = make_gmodel_logisticRegression()\n",
        "gmodel_XGBoost = make_gmodel_XGBClassifier()\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "# Sanity check of confounders with mediators\n",
        "X_train, X_test, a_train, a_test = train_test_split(confounders_with_allMediators, treatment, test_size=0.2)\n",
        "gmodel_randomForest.fit(X_train, a_train)\n",
        "gmodel_LogisticRegression.fit(X_train, a_train)\n",
        "gmodel_XGBoost.fit(X_train, a_train)\n",
        "a_pred_RF1 = gmodel_randomForest.predict_proba(X_test)[:,1]\n",
        "a_pred_LR1 = gmodel_LogisticRegression.predict_proba(X_test)[:,1]\n",
        "a_pred_XGB1 = gmodel_XGBoost.predict_proba(X_test)[:,1]\n",
        "\n",
        "test_ce_RF1=log_loss(a_test, a_pred_RF1)\n",
        "print(f\"Test CE of fit model {test_ce_RF1}\") \n",
        "test_ce_LR1=log_loss(a_test, a_pred_LR1)\n",
        "print(f\"Test CE of fit model {test_ce_LR1}\") \n",
        "test_ce_XGB1=log_loss(a_test, a_pred_XGB1)\n",
        "print(f\"Test CE of fit model {test_ce_XGB1}\") \n",
        "baseline_ce_1=log_loss(a_test, a_train.mean()*np.ones_like(a_test))\n",
        "print(f\"Test CE of no-covariate model {baseline_ce_1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aPxmmAFuKiKr",
        "outputId": "9998a7e2-ac46-4853-ac79-0e84417442b0"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test CE of fit model 0.6825371285020937\n",
            "Test CE of fit model 0.6772843801502143\n",
            "Test CE of fit model 0.7119531055197331\n",
            "Test CE of no-covariate model 0.6934184476415775\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounder with Mediator StudyHour"
      ],
      "metadata": {
        "id": "9w5AmJ3dK7rt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gmodel_randomForest = make_gmodel_randomForest()\n",
        "gmodel_LogisticRegression = make_gmodel_logisticRegression()\n",
        "gmodel_XGBoost = make_gmodel_XGBClassifier()\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "# Sanity check of confounders with mediators\n",
        "X_train, X_test, a_train, a_test = train_test_split(confounders_with_mediatorStudyHours, treatment, test_size=0.2)\n",
        "gmodel_randomForest.fit(X_train, a_train)\n",
        "gmodel_LogisticRegression.fit(X_train, a_train)\n",
        "gmodel_XGBoost.fit(X_train, a_train)\n",
        "a_pred_RF2 = gmodel_randomForest.predict_proba(X_test)[:,1]\n",
        "a_pred_LR2 = gmodel_LogisticRegression.predict_proba(X_test)[:,1]\n",
        "a_pred_XGB2 = gmodel_XGBoost.predict_proba(X_test)[:,1]\n",
        "\n",
        "test_ce_RF2=log_loss(a_test, a_pred_RF2)\n",
        "print(f\"Test CE of fit model {test_ce_RF2}\") \n",
        "test_ce_LR2=log_loss(a_test, a_pred_LR2)\n",
        "print(f\"Test CE of fit model {test_ce_LR2}\") \n",
        "test_ce_XGB2=log_loss(a_test, a_pred_XGB2)\n",
        "print(f\"Test CE of fit model {test_ce_XGB2}\") \n",
        "baseline_ce_2=log_loss(a_test, a_train.mean()*np.ones_like(a_test))\n",
        "print(f\"Test CE of no-covariate model {baseline_ce_2}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WRsn0T8ALCP1",
        "outputId": "d518b51e-0beb-4918-f6f6-2bb43ff9a0a8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test CE of fit model 0.6881377317572264\n",
            "Test CE of fit model 0.6904460291819955\n",
            "Test CE of fit model 0.7074084740961898\n",
            "Test CE of no-covariate model 0.6931170637648455\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Confounder with Mediator StudyHabit"
      ],
      "metadata": {
        "id": "T8PyKhP8tw-M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gmodel_randomForest = make_gmodel_randomForest()\n",
        "gmodel_LogisticRegression = make_gmodel_logisticRegression()\n",
        "gmodel_XGBoost = make_gmodel_XGBClassifier()\n",
        "# Sanity check that chosen model actually improves test error\n",
        "# A real analysis should give substantial attention to model selection and validation \n",
        "\n",
        "# Sanity check of confounders with mediators\n",
        "X_train, X_test, a_train, a_test = train_test_split(confounders_with_mediatorStudyHabits, treatment, test_size=0.2)\n",
        "gmodel_randomForest.fit(X_train, a_train)\n",
        "gmodel_LogisticRegression.fit(X_train, a_train)\n",
        "gmodel_XGBoost.fit(X_train, a_train)\n",
        "a_pred_RF3 = gmodel_randomForest.predict_proba(X_test)[:,1]\n",
        "a_pred_LR3 = gmodel_LogisticRegression.predict_proba(X_test)[:,1]\n",
        "a_pred_XGB3 = gmodel_XGBoost.predict_proba(X_test)[:,1]\n",
        "\n",
        "test_ce_RF3=log_loss(a_test, a_pred_RF3)\n",
        "print(f\"Test CE of fit model {test_ce_RF3}\") \n",
        "test_ce_LR3=log_loss(a_test, a_pred_LR3)\n",
        "print(f\"Test CE of fit model {test_ce_LR3}\") \n",
        "test_ce_XGB3=log_loss(a_test, a_pred_XGB3)\n",
        "print(f\"Test CE of fit model {test_ce_XGB3}\") \n",
        "baseline_ce_3=log_loss(a_test, a_train.mean()*np.ones_like(a_test))\n",
        "print(f\"Test CE of no-covariate model {baseline_ce_3}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DpJhj5SvtvWT",
        "outputId": "148c26e4-c6c6-49dc-ff50-6b3100b4e46f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test CE of fit model 0.6921129990910787\n",
            "Test CE of fit model 0.6934293132511458\n",
            "Test CE of fit model 0.7088466351631129\n",
            "Test CE of no-covariate model 0.6928663894825308\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2RkvV_4_dFWo"
      },
      "source": [
        "## Use cross fitting to get get predicted outcomes and propensity scores for each unit"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "KA0AsEGJ_X3b"
      },
      "outputs": [],
      "source": [
        "# helper functions to implement the cross fitting\n",
        "\n",
        "def treatment_k_fold_fit_and_predict(make_model, X:pd.DataFrame, A:np.array, n_splits:int):\n",
        "    \"\"\"\n",
        "    Implements K fold cross-fitting for the model predicting the treatment A. \n",
        "    That is, \n",
        "    1. Split data into K folds\n",
        "    2. For each fold j, the model is fit on the other K-1 folds\n",
        "    3. The fitted model is used to make predictions for each data point in fold j\n",
        "    Returns an array containing the predictions  \n",
        "\n",
        "    Args:\n",
        "    model: function that returns sklearn model (which implements fit and predict_prob)\n",
        "    X: dataframe of variables to adjust for\n",
        "    A: array of treatments\n",
        "    n_splits: number of splits to use\n",
        "    \"\"\"\n",
        "    predictions = np.full_like(A, np.nan, dtype=float)\n",
        "    kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=RANDOM_SEED)\n",
        "    print(kf)\n",
        "    \n",
        "    for train_index, test_index in kf.split(X, A):\n",
        "      X_train = X.loc[train_index]\n",
        "      A_train = A.loc[train_index]\n",
        "      g = make_model()\n",
        "      g.fit(X_train, A_train)\n",
        "\n",
        "      # get predictions for split\n",
        "      predictions[test_index] = g.predict_proba(X.loc[test_index])[:, 1]\n",
        "\n",
        "    assert np.isnan(predictions).sum() == 0\n",
        "    return predictions\n",
        "\n",
        "\n",
        "def outcome_k_fold_fit_and_predict(make_model, X:pd.DataFrame, y:np.array, A:np.array, n_splits:int, output_type:str):\n",
        "    \"\"\"\n",
        "    Implements K fold cross-fitting for the model predicting the outcome Y. \n",
        "    That is, \n",
        "    1. Split data into K folds\n",
        "    2. For each fold j, the model is fit on the other K-1 folds\n",
        "    3. The fitted model is used to make predictions for each data point in fold j\n",
        "    Returns two arrays containing the predictions for all units untreated, all units treated  \n",
        "\n",
        "    Args:\n",
        "    model: function that returns sklearn model (that implements fit and either predict_prob or predict)\n",
        "    X: dataframe of variables to adjust for\n",
        "    y: array of outcomes\n",
        "    A: array of treatments\n",
        "    n_splits: number of splits to use\n",
        "    output_type: type of outcome, \"binary\" or \"continuous\"\n",
        "\n",
        "    \"\"\"\n",
        "    predictions0 = np.full_like(A, np.nan, dtype=float)\n",
        "    predictions1 = np.full_like(y, np.nan, dtype=float)\n",
        "    if output_type == 'binary':\n",
        "      kf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=RANDOM_SEED)\n",
        "    elif output_type == 'continuous':\n",
        "      kf = KFold(n_splits=n_splits, shuffle=True, random_state=RANDOM_SEED)\n",
        "\n",
        "    # include the treatment as input feature\n",
        "    X_w_treatment = X.copy()\n",
        "    X_w_treatment[\"A\"] = A\n",
        "\n",
        "    # for predicting effect under treatment / control status for each data point \n",
        "    X0 = X_w_treatment.copy()\n",
        "    X0[\"A\"] = 0\n",
        "    X1 = X_w_treatment.copy()\n",
        "    X1[\"A\"] = 1\n",
        "\n",
        "    \n",
        "    for train_index, test_index in kf.split(X_w_treatment, y):\n",
        "      X_train = X_w_treatment.loc[train_index]\n",
        "      y_train = y.loc[train_index]\n",
        "      q = make_model()\n",
        "      q.fit(X_train, y_train)\n",
        "\n",
        "      if output_type =='binary':\n",
        "        predictions0[test_index] = q.predict_proba(X0.loc[test_index])[:, 1]\n",
        "        predictions1[test_index] = q.predict_proba(X1.loc[test_index])[:, 1]\n",
        "      elif output_type == 'continuous':\n",
        "        predictions0[test_index] = q.predict(X0.loc[test_index])\n",
        "        predictions1[test_index] = q.predict(X1.loc[test_index])\n",
        "\n",
        "    assert np.isnan(predictions0).sum() == 0\n",
        "    assert np.isnan(predictions1).sum() == 0\n",
        "    return predictions0, predictions1"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exclude Predictions with Moderate Extroversion Level"
      ],
      "metadata": {
        "id": "EcXXfNo7Vsrp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def exclude_moderate(df):\n",
        "  df.drop(df.index[363:747], inplace=True)\n",
        "  return df"
      ],
      "metadata": {
        "id": "_Q7GMNHXVrkw"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VNhM7URdgzQB"
      },
      "source": [
        "## Combine predicted values and data into estimate of ATU"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "J-vONC5ejwh2"
      },
      "outputs": [],
      "source": [
        "def att_aiptw(Q0, Q1, g, A, Y, prob_t=None):\n",
        "  \"\"\"\n",
        "  # Double ML estimator for the ATT\n",
        "  This uses the ATT specific scores, see equation 3.9 of https://www.econstor.eu/bitstream/10419/149795/1/869216953.pdf\n",
        "  \"\"\"\n",
        "\n",
        "  if prob_t is None:\n",
        "    prob_t = 1 - A.mean() # estimate marginal probability of treatment\n",
        "\n",
        "  tau_hat = (A*((1-g)/g)*(Y-Q1) - (1-A)*(Y-Q1)).mean()/ prob_t\n",
        "  \n",
        "  scores = (A*((1-g)/g)*(Y-Q1) - (1-A)*(Y-Q1) - tau_hat*(1-A)) / prob_t\n",
        "  n = Y.shape[0] # number of observations\n",
        "  std_hat = np.std(scores) / np.sqrt(n)\n",
        "\n",
        "  return tau_hat, std_hat\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "O_F5r0SSkzzK"
      },
      "outputs": [],
      "source": [
        "def ate_aiptw(Q0, Q1, g, A, Y, prob_t=None):\n",
        "  \"\"\"\n",
        "  # Double ML estimator for the ATE\n",
        "  \"\"\"\n",
        "\n",
        "  tau_hat = (Q1 - Q0 + A*(Y-Q1)/g - (1-A)*(Y-Q0)/(1-g)).mean()\n",
        "  \n",
        "  scores = Q1 - Q0 + A*(Y-Q1)/g - (1-A)*(Y-Q0)/(1-g) - tau_hat\n",
        "  n = Y.shape[0] # number of observations\n",
        "  std_hat = np.std(scores) / np.sqrt(n)\n",
        "\n",
        "  return tau_hat, std_hat\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1PUtEGGzXSIQ"
      },
      "source": [
        "# Natural Direct Effect with two Mediators"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "65_HhISR8mtX"
      },
      "source": [
        "## Check Overlap Conditions 0<Pr(A =1 |𝐗 = x, M1 = m1, M2 = m2) < 1 using the three models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "2wJF-GKy8twQ",
        "outputId": "8d93715e-2f60-457e-c9eb-2f0487a2ec83"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Using RandomForest')"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#check the ovrlap conditions using randomForest\n",
        "#get the propensity score function\n",
        "g1 = treatment_k_fold_fit_and_predict(make_gmodel_randomForest, X=confounders_with_allMediators, A=treatment, n_splits=10)\n",
        "g1_ol = np.concatenate((g1[:364],g1[746:]))\n",
        "hist(g1_ol,density = True)\n",
        "plt.title(\"Using RandomForest\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "TAGbVxO3QeGr",
        "outputId": "b817dd25-54b4-424a-c06d-8eb96fec3179"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Using Logistic Regression')"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#check the ovrlap conditions using Logistic Regression\n",
        "g2 = treatment_k_fold_fit_and_predict(make_gmodel_logisticRegression, X=confounders_with_allMediators, A=treatment, n_splits=10)\n",
        "g2_ol = np.concatenate((g2[:364],g2[746:]))\n",
        "hist(g2_ol,density = True)\n",
        "plt.title(\"Using Logistic Regression\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "grGefcHXX4ni",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "643076ab-cf4d-4ffe-b159-d4921adbe196"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Using Logistic Regression')"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#check the ovrlap conditions using XGBoost\n",
        "g3 = treatment_k_fold_fit_and_predict(make_gmodel_XGBClassifier, X=confounders_with_allMediators, A=treatment, n_splits=10)\n",
        "g3_ol = np.concatenate((g3[:364],g3[746:]))\n",
        "hist(g3_ol, density=True)\n",
        "plt.title(\"Using Logistic Regression\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "hist(g1_ol,density = True)\n",
        "hist(g2_ol,density = True)\n",
        "hist(g3_ol,density = True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "id": "E9GR4Xmu--0V",
        "outputId": "880cc7cb-9e53-4469-8b1b-f30858b99fb3"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, 3, figsize=(21,5))\n",
        "ax[0].hist(g1_ol,density = True)\n",
        "ax[0].set_title(\"Using RandomForest\")\n",
        "ax[1].hist(g2_ol,density = True)\n",
        "ax[1].set_title(\"Using Logistic Regression\")\n",
        "ax[2].hist(g3_ol,density = True)\n",
        "ax[2].set_title(\"Using XGBoost\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "um0Vi5Jz1DQF",
        "outputId": "e3a45e98-317a-407f-f099-38bc34a57d93"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1512x360 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pswwyh7Eltqc"
      },
      "source": [
        "## Calculate Natural Direct Effect with two mediators using RandomForest"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5PdLq_g6pdZE"
      },
      "source": [
        "### Calculate Q0 and Q1 model using Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "b54BFwwSl9pl"
      },
      "outputs": [],
      "source": [
        "#calculate Q0 and Q1 model\n",
        "Q0_RF,Q1_RF = outcome_k_fold_fit_and_predict(make_Qmodel_randomForest, X=confounders_with_allMediators, y=outcome, A=treatment, n_splits=10, output_type=\"continuous\")\n",
        "#Q0_RF"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YLIVzDWno0FW"
      },
      "source": [
        "### Combine the Dataset for g, Q0, Q1, A, and Y values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "YHZOhZvKoyVH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "b6cab719-61f8-4293-d1c3-58b6f0eb4dbe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.402782  72.299124  71.960764  0  77.000000\n",
              "1  0.336636  68.104021  67.523853  0  73.666664\n",
              "2  0.469887  72.793072  72.421547  0  70.000000\n",
              "3  0.393366  73.574458  73.066637  0  81.000000\n",
              "4  0.438056  74.199206  73.974197  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af5dc112-d811-4ed3-96d5-d3ccf194a87a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.402782</td>\n",
              "      <td>72.299124</td>\n",
              "      <td>71.960764</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.336636</td>\n",
              "      <td>68.104021</td>\n",
              "      <td>67.523853</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.469887</td>\n",
              "      <td>72.793072</td>\n",
              "      <td>72.421547</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.393366</td>\n",
              "      <td>73.574458</td>\n",
              "      <td>73.066637</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.438056</td>\n",
              "      <td>74.199206</td>\n",
              "      <td>73.974197</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af5dc112-d811-4ed3-96d5-d3ccf194a87a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-af5dc112-d811-4ed3-96d5-d3ccf194a87a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-af5dc112-d811-4ed3-96d5-d3ccf194a87a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "data_and_nuisance_estimates_RF = exclude_moderate(pd.DataFrame({'g': g1, 'Q0': Q0_RF, 'Q1': Q1_RF, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_RF.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P16hVRw5pig7"
      },
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZCLFLNnzphy1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c45ccb0-7342-4ba5-8acb-32715644c6ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using RandomForest is -1.8229251600760765 pm 1.6028959659873445\n"
          ]
        }
      ],
      "source": [
        "tau_hat_RF, std_hat_RF = att_aiptw(**data_and_nuisance_estimates_RF)\n",
        "print(f\"The estimate using RandomForest is {tau_hat_RF} pm {1.96*std_hat_RF}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate Natural Direct Effect with two mediators using Logistic Regression"
      ],
      "metadata": {
        "id": "4rFe-TQcqwj8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using Logistic Regression"
      ],
      "metadata": {
        "id": "_6gUluB-rfwN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_LR,Q1_LR = outcome_k_fold_fit_and_predict(make_Qmodel_linearRegression, X=confounders_with_allMediators, y=outcome, A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "NbWUe3dCqu4q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "SfQwRfbmsAAy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_LR = exclude_moderate(pd.DataFrame({'g': g2, 'Q0': Q0_LR, 'Q1': Q1_LR, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_LR.head()"
      ],
      "metadata": {
        "id": "jgXteqcxsQo1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "f74baebe-309e-4122-e38f-5fe99d80cbeb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.367456  74.400815  72.369989  0  77.000000\n",
              "1  0.367775  65.763319  64.326119  0  73.666664\n",
              "2  0.489072  68.645615  67.065967  0  70.000000\n",
              "3  0.261071  78.606101  77.026453  0  81.000000\n",
              "4  0.450896  74.054152  72.637679  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e16ce3c6-6edf-470f-b69f-d0bac6bdce64\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.367456</td>\n",
              "      <td>74.400815</td>\n",
              "      <td>72.369989</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.367775</td>\n",
              "      <td>65.763319</td>\n",
              "      <td>64.326119</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.489072</td>\n",
              "      <td>68.645615</td>\n",
              "      <td>67.065967</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.261071</td>\n",
              "      <td>78.606101</td>\n",
              "      <td>77.026453</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.450896</td>\n",
              "      <td>74.054152</td>\n",
              "      <td>72.637679</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e16ce3c6-6edf-470f-b69f-d0bac6bdce64')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e16ce3c6-6edf-470f-b69f-d0bac6bdce64 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e16ce3c6-6edf-470f-b69f-d0bac6bdce64');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "BrMCaZL9sa5U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_LR, std_hat_LR = att_aiptw(**data_and_nuisance_estimates_LR)\n",
        "print(f\"The estimate using RandomForest is {tau_hat_LR} pm {1.96*std_hat_LR}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pwKVGTpUsgIO",
        "outputId": "0f8c5475-d96f-472e-ed55-5336023432af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using RandomForest is -1.7545830996293097 pm 1.6116906687275725\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate the Natural Direct Effect with two Mediators using XGBoost model"
      ],
      "metadata": {
        "id": "7Mz72YvHtE7r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using XGBoost"
      ],
      "metadata": {
        "id": "xGBYzxtBtg72"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_XGB,Q1_XGB = outcome_k_fold_fit_and_predict(make_Qmodel_XGBoost, X=confounders_with_allMediators, y=outcome, A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "6EnXGFwUtOYW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "NZdRyegdtdKt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_XGB = exclude_moderate(pd.DataFrame({'g': g3, 'Q0': Q0_XGB, 'Q1': Q1_XGB, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_XGB.head()"
      ],
      "metadata": {
        "id": "OxZj4xFntvdy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "3313e29d-c520-4953-b6d5-ef943c45797a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.227087  77.488861  75.122292  0  77.000000\n",
              "1  0.199275  66.383614  62.081127  0  73.666664\n",
              "2  0.440174  72.696465  70.747185  0  70.000000\n",
              "3  0.622674  70.690514  69.941917  0  81.000000\n",
              "4  0.290809  75.049919  73.602463  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e77e4fbe-7c0c-4ff2-a9d7-6663ac6e3c0c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.227087</td>\n",
              "      <td>77.488861</td>\n",
              "      <td>75.122292</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.199275</td>\n",
              "      <td>66.383614</td>\n",
              "      <td>62.081127</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.440174</td>\n",
              "      <td>72.696465</td>\n",
              "      <td>70.747185</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.622674</td>\n",
              "      <td>70.690514</td>\n",
              "      <td>69.941917</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.290809</td>\n",
              "      <td>75.049919</td>\n",
              "      <td>73.602463</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e77e4fbe-7c0c-4ff2-a9d7-6663ac6e3c0c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e77e4fbe-7c0c-4ff2-a9d7-6663ac6e3c0c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e77e4fbe-7c0c-4ff2-a9d7-6663ac6e3c0c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 194
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "6IFD_uhvtrU9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_XGB, std_hat_XGB = att_aiptw(**data_and_nuisance_estimates_XGB)\n",
        "print(f\"The estimate using RandomForest is {tau_hat_XGB} pm {1.96*std_hat_XGB}\")"
      ],
      "metadata": {
        "id": "fAP289gxuP7X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a27130f-dc3b-4c74-f348-c008c0586447"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using RandomForest is -2.3732965265579797 pm 2.5775501827258482\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r5tVJ3-qvccX"
      },
      "source": [
        "# Natural Direct Effect with StudyHours as the mediator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vzrTOVNtvccX"
      },
      "source": [
        "## Check Overlap Conditions 0<Pr(A =1 |𝐗 = x, M1 = m1) < 1 using the three models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "outputId": "1a098610-3577-4f47-f33b-533efbae6ce1",
        "id": "z-lbBRKJvccX"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0.09635056,  0.33722697,  1.25255733,  2.55328994,  4.33577537,\n",
              "         9.63505638, 10.98396427,  1.73431015,  1.10803148,  0.28905169]),\n",
              " array([0.31562682, 0.34656204, 0.37749726, 0.40843248, 0.4393677 ,\n",
              "        0.47030292, 0.50123814, 0.53217336, 0.56310858, 0.5940438 ,\n",
              "        0.62497902]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#check the overlap conditions using randomForest\n",
        "#get the propensity score function\n",
        "g1_SH = treatment_k_fold_fit_and_predict(make_gmodel_randomForest, X=confounders_with_mediatorStudyHours, A=treatment, n_splits=10)\n",
        "g1_SH_ol = np.concatenate((g1_SH[:364],g1_SH[746:]))\n",
        "hist(g1_SH_ol, density=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "outputId": "f1ad366b-1f39-4f2e-ae8d-9935fd6b3642",
        "id": "qs3EjUetvccY"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.16586695, 0.24880043, 0.62200108, 2.15627041, 4.02227366,\n",
              "        5.51507625, 6.75907841, 6.09561059, 1.74160303, 0.49760086]),\n",
              " array([0.27255243, 0.30849239, 0.34443235, 0.38037231, 0.41631227,\n",
              "        0.45225223, 0.48819219, 0.52413215, 0.56007211, 0.59601207,\n",
              "        0.63195204]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#check the overlap conditions using Logistic Regression\n",
        "g2_SH = treatment_k_fold_fit_and_predict(make_gmodel_logisticRegression, X=confounders_with_mediatorStudyHours, A=treatment, n_splits=10)\n",
        "g2_SH_ol = np.concatenate((g2_SH[:364],g2_SH[746:]))\n",
        "hist(g2_SH_ol, density=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "outputId": "387acb87-6eb4-45db-8afb-4e9eb6966e19",
        "id": "Fky2lWR4vccY"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.03539834, 0.19469085, 0.46017837, 1.06195009, 2.58407855,\n",
              "        3.84071948, 2.49558271, 0.7787634 , 0.31858503, 0.10619501]),\n",
              " array([0.03583595, 0.12003838, 0.20424081, 0.28844324, 0.37264567,\n",
              "        0.4568481 , 0.54105053, 0.62525296, 0.70945539, 0.79365782,\n",
              "        0.87786025]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#check the ovrlap conditions using XGBoost\n",
        "g3_SH = treatment_k_fold_fit_and_predict(make_gmodel_XGBClassifier, X=confounders_with_mediatorStudyHours, A=treatment, n_splits=10)\n",
        "g3_SH_ol = np.concatenate((g3_SH[:364],g3_SH[746:]))\n",
        "hist(g3_SH_ol, density=True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, 3, figsize=(21,5))\n",
        "ax[0].hist(g1_SH_ol,density = True)\n",
        "ax[0].set_title(\"Using RandomForest\")\n",
        "ax[1].hist(g2_SH_ol,density = True)\n",
        "ax[1].set_title(\"Using Logistic Regression\")\n",
        "ax[2].hist(g3_SH_ol,density = True)\n",
        "ax[2].set_title(\"Using XGBoost\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "a4tdkl8GBFnG",
        "outputId": "e19936a2-30ef-46f6-954c-dbb3d06fc320"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1512x360 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mUo3HEw7vccY"
      },
      "source": [
        "## Calculate Natural Direct Effect using RandomForest: Using StudyHours as the mediator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qimN2jQQvccY"
      },
      "source": [
        "### Calculate Q0 and Q1 model using Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9FCg3QNLvccY"
      },
      "outputs": [],
      "source": [
        "# Calculate Q0 and Q1 model\n",
        "Q0_RFSH,Q1_RFSH = outcome_k_fold_fit_and_predict(make_Qmodel_randomForest, X=confounders_with_mediatorStudyHours, y=outcome, A=treatment, n_splits=10, output_type=\"continuous\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HJS5fNTRvccY"
      },
      "source": [
        "### Combine the Dataset for g, Q0, Q1, A, and Y values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "69e123ee-1228-47e0-81a0-2b2ea94cb81e",
        "id": "GGvlefq3vccY"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.405798  72.627219  72.246202  0  77.000000\n",
              "1  0.349164  67.910706  67.193627  0  73.666664\n",
              "2  0.467157  72.367704  71.957374  0  70.000000\n",
              "3  0.395640  73.347364  72.649354  0  81.000000\n",
              "4  0.487912  74.291248  74.006197  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e19a3d2-0d38-441d-a70c-c685305af268\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.405798</td>\n",
              "      <td>72.627219</td>\n",
              "      <td>72.246202</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.349164</td>\n",
              "      <td>67.910706</td>\n",
              "      <td>67.193627</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.467157</td>\n",
              "      <td>72.367704</td>\n",
              "      <td>71.957374</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.395640</td>\n",
              "      <td>73.347364</td>\n",
              "      <td>72.649354</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.487912</td>\n",
              "      <td>74.291248</td>\n",
              "      <td>74.006197</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e19a3d2-0d38-441d-a70c-c685305af268')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e19a3d2-0d38-441d-a70c-c685305af268 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e19a3d2-0d38-441d-a70c-c685305af268');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 200
        }
      ],
      "source": [
        "data_and_nuisance_estimates_RFSH = exclude_moderate(pd.DataFrame({'g': g1_SH, 'Q0': Q0_RFSH, 'Q1': Q1_RFSH, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_RFSH.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "my5fFYv7vccZ"
      },
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "69b3073d-94e9-49e4-a144-a8bfce84dd45",
        "id": "y26GBnjdvccZ"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate is -1.8372531778586831 pm 1.6098985819739995\n"
          ]
        }
      ],
      "source": [
        "tau_hat_RFSH, std_hat_RFSH = att_aiptw(**data_and_nuisance_estimates_RFSH)\n",
        "print(f\"The estimate is {tau_hat_RFSH} pm {1.96*std_hat_RFSH}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate Natural Direct Effect using Logistic Regression: Using StudyHours as the mediator"
      ],
      "metadata": {
        "id": "wusfve4QvccZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using Logistic Regression"
      ],
      "metadata": {
        "id": "gpajpARxvccZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_LRSH,Q1_LRSH = outcome_k_fold_fit_and_predict(make_Qmodel_linearRegression, X=confounders_with_mediatorStudyHours, y=outcome, A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "l53YzxSVvccZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "kopNcIoAvccZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_LRSH = exclude_moderate(pd.DataFrame({'g': g2_SH, 'Q0': Q0_LRSH, 'Q1': Q1_LRSH, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_LRSH.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "4bab21d5-5f63-4575-fa53-39c20aa9762e",
        "id": "C-eq2ZCdvccZ"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.407010  74.327267  72.283829  0  77.000000\n",
              "1  0.380085  65.705040  64.250488  0  73.666664\n",
              "2  0.539543  68.788454  67.227153  0  70.000000\n",
              "3  0.310189  78.884170  77.322870  0  81.000000\n",
              "4  0.522647  73.766872  72.331557  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0674216-73ac-46cb-99b6-abe5055ab5cc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.407010</td>\n",
              "      <td>74.327267</td>\n",
              "      <td>72.283829</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.380085</td>\n",
              "      <td>65.705040</td>\n",
              "      <td>64.250488</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.539543</td>\n",
              "      <td>68.788454</td>\n",
              "      <td>67.227153</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.310189</td>\n",
              "      <td>78.884170</td>\n",
              "      <td>77.322870</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.522647</td>\n",
              "      <td>73.766872</td>\n",
              "      <td>72.331557</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0674216-73ac-46cb-99b6-abe5055ab5cc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c0674216-73ac-46cb-99b6-abe5055ab5cc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c0674216-73ac-46cb-99b6-abe5055ab5cc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "HjHBw0CbvccZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_LRSH, std_hat_LRSH = att_aiptw(**data_and_nuisance_estimates_LRSH)\n",
        "print(f\"The estimate is {tau_hat_LRSH} pm {1.96*std_hat_LRSH}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be2f2ad5-b41d-4cde-96d3-3f6025cf06cf",
        "id": "6oxU2fRdvccZ"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate is -1.6982852478109984 pm 1.5987121171258265\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate the Natural Direct Effect using XGBoost model: Using StudyHours as the Mediator"
      ],
      "metadata": {
        "id": "khunWu9-vcca"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using XGBoost"
      ],
      "metadata": {
        "id": "MiyobKXivcca"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_XGSH,Q1_XGSH = outcome_k_fold_fit_and_predict(make_Qmodel_XGBoost, X=confounders_with_mediatorStudyHours, y=outcome, A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "TLYnmWPdvcca"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "ztWQif2Tvcca"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_XGSH = exclude_moderate(pd.DataFrame({'g': g3_SH, 'Q0': Q0_XGSH, 'Q1': Q1_XGSH, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_XGSH.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "530b6044-5cce-4d92-d631-2832efea130a",
        "id": "SA3MUED-vcca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.278625  77.259163  74.763947  0  77.000000\n",
              "1  0.200761  66.603958  59.280952  0  73.666664\n",
              "2  0.520494  72.521431  69.231903  0  70.000000\n",
              "3  0.596783  66.622696  66.040443  0  81.000000\n",
              "4  0.431568  75.098595  74.831985  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ac21566-f858-48ab-a771-4254f1918054\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.278625</td>\n",
              "      <td>77.259163</td>\n",
              "      <td>74.763947</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.200761</td>\n",
              "      <td>66.603958</td>\n",
              "      <td>59.280952</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.520494</td>\n",
              "      <td>72.521431</td>\n",
              "      <td>69.231903</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.596783</td>\n",
              "      <td>66.622696</td>\n",
              "      <td>66.040443</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.431568</td>\n",
              "      <td>75.098595</td>\n",
              "      <td>74.831985</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ac21566-f858-48ab-a771-4254f1918054')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5ac21566-f858-48ab-a771-4254f1918054 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5ac21566-f858-48ab-a771-4254f1918054');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "xXIpsBenvcca"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_XGSH, std_hat_XGSH = att_aiptw(**data_and_nuisance_estimates_XGSH)\n",
        "print(f\"The estimate is {tau_hat_XGSH} pm {1.96*std_hat_XGSH}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "46a751a9-a8de-46ac-c08b-12187a3c289d",
        "id": "FEy11J07vcca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate is -2.571081234753055 pm 2.448954950217818\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Natural Direct Effect with Study Habits as the mediator"
      ],
      "metadata": {
        "id": "bNrqufm3ztjM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Check Overlap Conditions 0<Pr(A =1 |𝐗 = x, M2 = m2) < 1 using the three models"
      ],
      "metadata": {
        "id": "BHGKPeJ7z3r_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#check the overlap conditions using randomForest\n",
        "#get the propensity score function\n",
        "g1_SB = treatment_k_fold_fit_and_predict(make_gmodel_randomForest, X=confounders_with_mediatorStudyHabits, A=treatment, n_splits=10)\n",
        "g1_SB_ol = np.concatenate((g1_SB[:364],g1_SB[746:]))                                      \n",
        "hist(g1_SB_ol, density=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "AKHGJ8ufzu-F",
        "outputId": "22cc5c61-a09a-47e2-9eea-068fd5ff41ec"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0.08280973,  0.3726438 ,  1.07652653,  1.94602873,  3.93346233,\n",
              "        11.75898213,  6.50056406,  1.53198007,  0.4968584 ,  0.08280973]),\n",
              " array([0.29084165, 0.32683532, 0.36282898, 0.39882265, 0.43481632,\n",
              "        0.47080998, 0.50680365, 0.54279732, 0.57879098, 0.61478465,\n",
              "        0.65077832]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g2_SB = treatment_k_fold_fit_and_predict(make_gmodel_logisticRegression, X=confounders_with_mediatorStudyHabits, \n",
        "                                      A=treatment, n_splits=10)\n",
        "g2_SB_ol = np.concatenate((g2_SB[:364],g1_SB[746:]))\n",
        "hist(g2_SB_ol, density=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "EkVIsseLzvEq",
        "outputId": "7c585d08-1420-4503-a578-e3086cb2a648"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.08027969, 0.56195786, 1.56545404, 2.32811114, 6.02097709,\n",
              "        8.58992731, 4.93720121, 2.1274119 , 0.56195786, 0.16055939]),\n",
              " array([0.29084165, 0.32796967, 0.36509769, 0.40222571, 0.43935372,\n",
              "        0.47648174, 0.51360976, 0.55073778, 0.58786579, 0.62499381,\n",
              "        0.66212183]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g3_SB = treatment_k_fold_fit_and_predict(make_gmodel_XGBClassifier, X=confounders_with_mediatorStudyHabits, \n",
        "                                      A=treatment, n_splits=10)\n",
        "g3_SB_ol = np.concatenate((g3_SB[:364],g1_SB[746:]))\n",
        "hist(g3_SB_ol, density=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "OP0YN2ghzvsa",
        "outputId": "64aa80a2-3a14-484d-ab84-a2fb0d143082"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0.22276885, 0.36453085, 0.60755141, 1.25560626, 4.03009105,\n",
              "        5.06292845, 1.43787168, 0.42528599, 0.10125857, 0.08100686]),\n",
              " array([0.12142241, 0.19501188, 0.26860136, 0.34219083, 0.41578031,\n",
              "        0.48936978, 0.56295925, 0.63654873, 0.7101382 , 0.78372768,\n",
              "        0.85731715]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, 3, figsize=(21,5))\n",
        "ax[0].hist(g1_SB_ol,density = True)\n",
        "ax[0].set_title(\"Using RandomForest\")\n",
        "ax[1].hist(g2_SB_ol,density = True)\n",
        "ax[1].set_title(\"Using Logistic Regression\")\n",
        "ax[2].hist(g3_SB_ol,density = True)\n",
        "ax[2].set_title(\"Using XGBoost\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "9vP1tMVBBXLa",
        "outputId": "315d0c4e-1712-4203-c633-ec7245f811cc"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1512x360 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate Natural Direct Effect using RandomForest: Using Study Habits as the mediator"
      ],
      "metadata": {
        "id": "9nLcNeCvz_81"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using RandomForest"
      ],
      "metadata": {
        "id": "GsaTtDxg1Ws8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_RFSB,Q1_RFSB = outcome_k_fold_fit_and_predict(make_Qmodel_randomForest, \n",
        "                                             X=confounders_with_mediatorStudyHabits, y=outcome, \n",
        "                                             A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "5IQjKO6m0AHN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the Dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "dyqay97i1Kb1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_RFSB = exclude_moderate(pd.DataFrame({'g': g1_SB, 'Q0': Q0_RFSB, 'Q1': Q1_RFSB, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_RFSB.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "xS4UGQTp0AQi",
        "outputId": "dff08d3a-56e9-4c1f-9e97-d184a4f483a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.396729  71.131685  70.508828  0  77.000000\n",
              "1  0.329397  67.594057  65.971519  0  73.666664\n",
              "2  0.506071  68.636775  68.209594  0  70.000000\n",
              "3  0.417467  69.222686  68.892401  0  81.000000\n",
              "4  0.430190  71.657158  71.619395  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08850717-e434-4dad-b162-a779ad782510\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.396729</td>\n",
              "      <td>71.131685</td>\n",
              "      <td>70.508828</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.329397</td>\n",
              "      <td>67.594057</td>\n",
              "      <td>65.971519</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.506071</td>\n",
              "      <td>68.636775</td>\n",
              "      <td>68.209594</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.417467</td>\n",
              "      <td>69.222686</td>\n",
              "      <td>68.892401</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.430190</td>\n",
              "      <td>71.657158</td>\n",
              "      <td>71.619395</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08850717-e434-4dad-b162-a779ad782510')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-08850717-e434-4dad-b162-a779ad782510 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-08850717-e434-4dad-b162-a779ad782510');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "rkaOAkob1cCS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_RFSB, std_hat_RFSB = att_aiptw(**data_and_nuisance_estimates_RFSB)\n",
        "print(f\"The estimate using RandomForest is {tau_hat_RFSB} pm {1.96*std_hat_RFSB}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eRNjwenD0AY0",
        "outputId": "c14f8e60-c24d-444b-a0aa-efc6709b8d77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using RandomForest is -2.114952277727547 pm 1.6311171760534149\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate Natural Direct Effect using LogisticRegression: Using Study Habits as the mediator"
      ],
      "metadata": {
        "id": "9_qcNP9r0Miw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using Logistic Regression"
      ],
      "metadata": {
        "id": "V08Cvsep1SGJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_LRSB,Q1_LRSB = outcome_k_fold_fit_and_predict(make_Qmodel_linearRegression, \n",
        "                                             X=confounders_with_mediatorStudyHabits, y=outcome, \n",
        "                                             A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "-PygHOPH0SXZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the Dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "qA08ShfE1Ifv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_LRSB = exclude_moderate(pd.DataFrame({'g': g2_SB, 'Q0': Q0_LRSB, 'Q1': Q1_LRSB, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_LRSB.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "3wZhc3fK0SeG",
        "outputId": "d771d4bf-8b9e-4e81-dd92-ef3a5f38598c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.398288  72.574095  70.301962  0  77.000000\n",
              "1  0.387782  64.772486  63.101131  0  73.666664\n",
              "2  0.538986  66.451156  64.611026  0  70.000000\n",
              "3  0.406636  69.112386  67.272256  0  81.000000\n",
              "4  0.487341  72.313546  70.693444  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2188dfc9-c586-49e1-96e1-f20bb681237c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.398288</td>\n",
              "      <td>72.574095</td>\n",
              "      <td>70.301962</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.387782</td>\n",
              "      <td>64.772486</td>\n",
              "      <td>63.101131</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.538986</td>\n",
              "      <td>66.451156</td>\n",
              "      <td>64.611026</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.406636</td>\n",
              "      <td>69.112386</td>\n",
              "      <td>67.272256</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.487341</td>\n",
              "      <td>72.313546</td>\n",
              "      <td>70.693444</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2188dfc9-c586-49e1-96e1-f20bb681237c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2188dfc9-c586-49e1-96e1-f20bb681237c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2188dfc9-c586-49e1-96e1-f20bb681237c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 215
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "W0g50BEq1dnq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_LRSB, std_hat_LRSB = att_aiptw(**data_and_nuisance_estimates_LRSB)\n",
        "print(f\"The estimate using LogisticRegression is {tau_hat_LRSB} pm {1.96*std_hat_LRSB}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ePIUW3th0Smx",
        "outputId": "e94ca895-10a2-462c-eddf-e7cb85bc8f76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using LogisticRegression is -2.0579612230360245 pm 1.631844226495338\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Calculate Natural Direct Effect using XGBoost: Using Study Habits as the mediator"
      ],
      "metadata": {
        "id": "iaseTssk0iMv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Q0 and Q1 model using XGBoost"
      ],
      "metadata": {
        "id": "s3YYLOfD1Prq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_XGSB,Q1_XGSB = outcome_k_fold_fit_and_predict(make_Qmodel_XGBoost, \n",
        "                                             X=confounders_with_mediatorStudyHabits, y=outcome, \n",
        "                                             A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "VggmGQj80iVq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Combine the Dataset for g, Q0, Q1, A, and Y values"
      ],
      "metadata": {
        "id": "ivLLPIdt1HIl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_XGSB = exclude_moderate(pd.DataFrame({'g': g3_SB, 'Q0': Q0_XGSB, 'Q1': Q1_XGSB, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_XGSB.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "EZXtfvmF0icE",
        "outputId": "f2ce951f-0792-4113-de60-178e5d0c61a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.294540  74.226723  71.850433  0  77.000000\n",
              "1  0.258790  64.716011  59.577900  0  73.666664\n",
              "2  0.712588  68.861565  65.525139  0  70.000000\n",
              "3  0.440861  70.527634  69.541443  0  81.000000\n",
              "4  0.408167  70.058609  69.259811  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c46630c-f821-4bba-922c-f808ecee7f57\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.294540</td>\n",
              "      <td>74.226723</td>\n",
              "      <td>71.850433</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.258790</td>\n",
              "      <td>64.716011</td>\n",
              "      <td>59.577900</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.712588</td>\n",
              "      <td>68.861565</td>\n",
              "      <td>65.525139</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.440861</td>\n",
              "      <td>70.527634</td>\n",
              "      <td>69.541443</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.408167</td>\n",
              "      <td>70.058609</td>\n",
              "      <td>69.259811</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c46630c-f821-4bba-922c-f808ecee7f57')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8c46630c-f821-4bba-922c-f808ecee7f57 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8c46630c-f821-4bba-922c-f808ecee7f57');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 218
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate the Natural Direct Effect using the ATU formula"
      ],
      "metadata": {
        "id": "Lp5gKOQI1fb7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_XGSB, std_hat_XGSB = att_aiptw(**data_and_nuisance_estimates_XGSB)\n",
        "print(f\"The estimate using XGBoost is {tau_hat_XGSB} pm {1.96*std_hat_XGSB}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DIufAB540ili",
        "outputId": "bb9154cd-96ad-4646-b56d-931639a80e88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using XGBoost is -2.8114767903316187 pm 2.388752939243781\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Estimate the Total Effect using ATE"
      ],
      "metadata": {
        "id": "fkKquN-J2SuD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Check Overlap Conditions 0<Pr(A =1 |𝐗 = x, M1 = m1, M2 = m2) < 1 using the three models"
      ],
      "metadata": {
        "id": "qeWyAMFFgjmg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#get the propensity score function\n",
        "g1_TE = treatment_k_fold_fit_and_predict(make_gmodel_randomForest, X=confounders_without_Mediator, \n",
        "                                      A=treatment, n_splits=10)\n",
        "g1_TE_ol = np.concatenate((g1_TE[:364],g1_SB[746:]))\n",
        "hist(g1_TE_ol, density=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "469lxIHy4-e-",
        "outputId": "a67b39df-42a1-41e6-d6b7-82788adfde60"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0.14786312,  0.73931559,  1.51559696,  1.21987072,  8.02157416,\n",
              "        10.75704184,  1.6264943 ,  0.62841825,  0.07393156,  0.07393156]),\n",
              " array([0.29084165, 0.33115767, 0.37147368, 0.4117897 , 0.45210572,\n",
              "        0.49242173, 0.53273775, 0.57305376, 0.61336978, 0.6536858 ,\n",
              "        0.69400181]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g2_TE = treatment_k_fold_fit_and_predict(make_gmodel_logisticRegression, X=confounders_without_Mediator, \n",
        "                                      A=treatment, n_splits=10)\n",
        "g2_TE_ol = np.concatenate((g2_TE[:364],g1_SB[746:]))\n",
        "hist(g2_TE_ol, density=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "__lXH6BF5Nvc",
        "outputId": "14fb60cc-4644-44b2-c39e-493cf9e59296"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0.09247878,  0.04623939,  0.3699151 ,  1.80333613,  3.69915103,\n",
              "         5.13257205, 12.9470286 ,  5.13257205,  1.43342102,  0.3699151 ]),\n",
              " array([0.29084165, 0.32307203, 0.35530241, 0.38753279, 0.41976316,\n",
              "        0.45199354, 0.48422392, 0.5164543 , 0.54868468, 0.58091506,\n",
              "        0.61314544]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "g3_TE = treatment_k_fold_fit_and_predict(make_gmodel_XGBClassifier, X=confounders_without_Mediator, \n",
        "                                      A=treatment, n_splits=10)\n",
        "g3_TE_ol = np.concatenate((g1_TE[:364],g1_SB[746:]))\n",
        "hist(g3_TE_ol, density=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "vSV9vGil5N7j",
        "outputId": "74a5c095-9fab-44ff-a412-b8736e522f76"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StratifiedKFold(n_splits=10, random_state=42, shuffle=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 0.14786312,  0.73931559,  1.51559696,  1.21987072,  8.02157416,\n",
              "        10.75704184,  1.6264943 ,  0.62841825,  0.07393156,  0.07393156]),\n",
              " array([0.29084165, 0.33115767, 0.37147368, 0.4117897 , 0.45210572,\n",
              "        0.49242173, 0.53273775, 0.57305376, 0.61336978, 0.6536858 ,\n",
              "        0.69400181]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(1, 3, figsize=(21,5))\n",
        "ax[0].hist(g1_TE_ol,density = True)\n",
        "ax[0].set_title(\"Using RandomForest\")\n",
        "ax[1].hist(g2_TE_ol,density = True)\n",
        "ax[1].set_title(\"Using Logistic Regression\")\n",
        "ax[2].hist(g3_TE_ol,density = True)\n",
        "ax[2].set_title(\"Using XGBoost\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "zgjVq39DBfwy",
        "outputId": "cc3abe3a-28d8-4feb-e635-a844cedaab29"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1512x360 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Total Effect using RandomForest"
      ],
      "metadata": {
        "id": "Q_HJW-J15zq_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_RFTE,Q1_RFTE = outcome_k_fold_fit_and_predict(make_Qmodel_randomForest, \n",
        "                                             X=confounders_without_Mediator, y=outcome, \n",
        "                                             A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "trLbDeNa58Q-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_RFTE = exclude_moderate(pd.DataFrame({'g': g1_TE, 'Q0': Q0_RFTE, 'Q1': Q1_RFTE, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_RFTE.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "uoORIJ3258pb",
        "outputId": "43c1b18c-5df2-4ec6-af6e-6ae7cb270c74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.411958  71.186335  66.803693  0  77.000000\n",
              "1  0.337099  69.780694  66.104271  0  73.666664\n",
              "2  0.532632  70.325724  68.095118  0  70.000000\n",
              "3  0.360352  69.518177  67.319265  0  81.000000\n",
              "4  0.519409  72.097452  70.847277  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd5d0443-4056-4c48-9d5a-bd78b3aa9595\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.411958</td>\n",
              "      <td>71.186335</td>\n",
              "      <td>66.803693</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.337099</td>\n",
              "      <td>69.780694</td>\n",
              "      <td>66.104271</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.532632</td>\n",
              "      <td>70.325724</td>\n",
              "      <td>68.095118</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.360352</td>\n",
              "      <td>69.518177</td>\n",
              "      <td>67.319265</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.519409</td>\n",
              "      <td>72.097452</td>\n",
              "      <td>70.847277</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd5d0443-4056-4c48-9d5a-bd78b3aa9595')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dd5d0443-4056-4c48-9d5a-bd78b3aa9595 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dd5d0443-4056-4c48-9d5a-bd78b3aa9595');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 224
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_RFTE, std_hat_RFTE = att_aiptw(**data_and_nuisance_estimates_RFTE)\n",
        "print(f\"The estimate using RandomForest is {tau_hat_RFTE} pm {1.96*std_hat_RFTE}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RRvEOQfl58x4",
        "outputId": "3faa90fe-2faf-4739-8b14-711692ad46dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using RandomForest is -2.2013651850537603 pm 1.6693509737724903\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Total Effect using Logistic Regression"
      ],
      "metadata": {
        "id": "tys7oUAQ50kW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_LRTE,Q1_LRTE = outcome_k_fold_fit_and_predict(make_Qmodel_linearRegression, \n",
        "                                             X=confounders_without_Mediator, y=outcome, \n",
        "                                             A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "EQtboVhd6cuB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_LRTE = exclude_moderate(pd.DataFrame({'g': g2_TE, 'Q0': Q0_LRTE, 'Q1': Q1_LRTE, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_LRTE.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "1r-jXEPN6i9t",
        "outputId": "109a1be5-4a9a-4051-d3d8-d271276d770e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.456252  69.044088  66.615084  0  77.000000\n",
              "1  0.403838  67.693013  65.866381  0  73.666664\n",
              "2  0.528368  70.077743  68.152090  0  70.000000\n",
              "3  0.421758  68.350808  66.425155  0  81.000000\n",
              "4  0.513315  71.925262  70.085348  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8571e0a9-f45d-4fa7-9f66-e9d92f398e85\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.456252</td>\n",
              "      <td>69.044088</td>\n",
              "      <td>66.615084</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.403838</td>\n",
              "      <td>67.693013</td>\n",
              "      <td>65.866381</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.528368</td>\n",
              "      <td>70.077743</td>\n",
              "      <td>68.152090</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.421758</td>\n",
              "      <td>68.350808</td>\n",
              "      <td>66.425155</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.513315</td>\n",
              "      <td>71.925262</td>\n",
              "      <td>70.085348</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8571e0a9-f45d-4fa7-9f66-e9d92f398e85')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8571e0a9-f45d-4fa7-9f66-e9d92f398e85 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8571e0a9-f45d-4fa7-9f66-e9d92f398e85');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 227
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_LRTE, std_hat_LRTE = att_aiptw(**data_and_nuisance_estimates_LRTE)\n",
        "print(f\"The estimate using Logistic Regression is {tau_hat_LRTE} pm {1.96*std_hat_LRTE}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f-65NIKL6ot4",
        "outputId": "ab70c945-1b5c-4a67-b09c-aaad1b5ec0b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using Logistic Regression is -2.2091922486069926 pm 1.6352836765340613\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Calculate Total Effect using XGBoost"
      ],
      "metadata": {
        "id": "QMEDx8iq3cBJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q0_XGTE,Q1_XGTE = outcome_k_fold_fit_and_predict(make_Qmodel_XGBoost, \n",
        "                                             X=confounders_without_Mediator, y=outcome, \n",
        "                                             A=treatment, n_splits=10, output_type=\"continuous\")"
      ],
      "metadata": {
        "id": "AmPYr52T3ZH0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_and_nuisance_estimates_XGTE = exclude_moderate(pd.DataFrame({'g': g3_TE, 'Q0': Q0_XGTE, 'Q1': Q1_XGTE, 'A': treatment, 'Y': outcome}))\n",
        "data_and_nuisance_estimates_XGTE.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "55loX07Z3qJV",
        "outputId": "c7d75df9-2873-4166-ff94-470e7d04654c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          g         Q0         Q1  A          Y\n",
              "0  0.388895  72.064819  66.912010  0  77.000000\n",
              "1  0.325704  70.125023  65.910683  0  73.666664\n",
              "2  0.553644  71.329063  68.893646  0  70.000000\n",
              "3  0.368042  71.262108  66.487671  0  81.000000\n",
              "4  0.557024  72.482079  70.086472  0  81.500000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-86966ea2-81fb-4a22-972c-75d758dfbe29\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>g</th>\n",
              "      <th>Q0</th>\n",
              "      <th>Q1</th>\n",
              "      <th>A</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.388895</td>\n",
              "      <td>72.064819</td>\n",
              "      <td>66.912010</td>\n",
              "      <td>0</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.325704</td>\n",
              "      <td>70.125023</td>\n",
              "      <td>65.910683</td>\n",
              "      <td>0</td>\n",
              "      <td>73.666664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.553644</td>\n",
              "      <td>71.329063</td>\n",
              "      <td>68.893646</td>\n",
              "      <td>0</td>\n",
              "      <td>70.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.368042</td>\n",
              "      <td>71.262108</td>\n",
              "      <td>66.487671</td>\n",
              "      <td>0</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.557024</td>\n",
              "      <td>72.482079</td>\n",
              "      <td>70.086472</td>\n",
              "      <td>0</td>\n",
              "      <td>81.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86966ea2-81fb-4a22-972c-75d758dfbe29')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-86966ea2-81fb-4a22-972c-75d758dfbe29 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-86966ea2-81fb-4a22-972c-75d758dfbe29');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 230
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tau_hat_XGTE, std_hat_XGTE = att_aiptw(**data_and_nuisance_estimates_XGTE)\n",
        "print(f\"The estimate using XGBoost is {tau_hat_XGTE} pm {1.96*std_hat_XGTE}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gPCScnwa4wsj",
        "outputId": "fc50d920-fe61-48cf-9218-774a8b5d250b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The estimate using XGBoost is -1.862313596001122 pm 1.825616471795112\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# The table of results"
      ],
      "metadata": {
        "id": "XDCavsMVGuMd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Natural Direct Effect"
      ],
      "metadata": {
        "id": "FifwR0gFsQ0j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NDE_table = [['Outcome','Type of causal effect','Mediator excluded', 'Model', 'Estimate','p/m', 'Standard Error'], \n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Hours', 'RandomForest',tau_hat_RFSH,1.96*std_hat_RFSH, std_hat_RFSH], \n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Hours', 'Logistic Regression',tau_hat_LRSH,1.96*std_hat_LRSH,std_hat_LRSH],\n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Hours', 'XGBoost',tau_hat_XGSH,1.96*std_hat_XGSH,std_hat_XGSH],\n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Habits', 'RandomForest',tau_hat_RFSB,1.96*std_hat_RFSB,std_hat_RFSB], \n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Habits', 'Logistic Regression',tau_hat_LRSB,1.96*std_hat_LRSB,std_hat_LRSB],\n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Habits', 'XGBoost',tau_hat_XGSB,1.96*std_hat_XGSB,std_hat_XGSB],\n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Hours and Study Habits', 'RandomForest',tau_hat_RF,1.96*std_hat_RF,std_hat_RF], \n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Hours and Study Habits', 'Logistic Regression',tau_hat_LR,1.96*std_hat_LR,std_hat_LR],\n",
        "         ['Fall_grade','Natural Direct Effect', 'Study Hours and Study Habits', 'XGBoost',tau_hat_XGB,1.96*std_hat_XGB,std_hat_XGB]]"
      ],
      "metadata": {
        "id": "l6l7o2unG0t4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TE_table = [['Outcome','Type of causal effect', 'Model', 'Estimate','p/m', 'Standard Error'],\n",
        "            ['Fall_grade','Total Effect', 'RandomForest',tau_hat_RFTE,1.96*std_hat_RFTE, std_hat_RFTE], \n",
        "            ['Fall_grade','Total Effect', 'Logistic Regression',tau_hat_LRTE,1.96*std_hat_LRTE, std_hat_LRTE],\n",
        "            ['Fall_grade','Total Effect', 'XGBoost',tau_hat_XGTE,1.96*std_hat_XGTE, std_hat_XGTE]]"
      ],
      "metadata": {
        "id": "h8Q9CqAdMY5k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_NDE = pd.DataFrame(NDE_table)\n",
        "df_NDE.columns = df_NDE.iloc[0]\n",
        "df_NDE = df_NDE[1:]\n",
        "df_NDE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 567
        },
        "id": "pz02hMA-KYyy",
        "outputId": "27c1f20d-9ff4-4a0f-efcb-1e503f85c441"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     Outcome  Type of causal effect             Mediator excluded  \\\n",
              "1  Fall_grade  Natural Direct Effect                   Study Hours   \n",
              "2  Fall_grade  Natural Direct Effect                   Study Hours   \n",
              "3  Fall_grade  Natural Direct Effect                   Study Hours   \n",
              "4  Fall_grade  Natural Direct Effect                  Study Habits   \n",
              "5  Fall_grade  Natural Direct Effect                  Study Habits   \n",
              "6  Fall_grade  Natural Direct Effect                  Study Habits   \n",
              "7  Fall_grade  Natural Direct Effect  Study Hours and Study Habits   \n",
              "8  Fall_grade  Natural Direct Effect  Study Hours and Study Habits   \n",
              "9  Fall_grade  Natural Direct Effect  Study Hours and Study Habits   \n",
              "\n",
              "0                Model  Estimate       p/m Standard Error  \n",
              "1         RandomForest -1.837253  1.609899       0.821377  \n",
              "2  Logistic Regression -1.698285  1.598712       0.815669  \n",
              "3              XGBoost -2.571081  2.448955       1.249467  \n",
              "4         RandomForest -2.114952  1.631117       0.832203  \n",
              "5  Logistic Regression -2.057961  1.631844       0.832574  \n",
              "6              XGBoost -2.811477  2.388753       1.218751  \n",
              "7         RandomForest -1.822925  1.602896       0.817804  \n",
              "8  Logistic Regression -1.754583  1.611691       0.822291  \n",
              "9              XGBoost -2.373297   2.57755       1.315077  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48697504-b685-4507-b7c4-521ead17a286\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>Type of causal effect</th>\n",
              "      <th>Mediator excluded</th>\n",
              "      <th>Model</th>\n",
              "      <th>Estimate</th>\n",
              "      <th>p/m</th>\n",
              "      <th>Standard Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Hours</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>-1.837253</td>\n",
              "      <td>1.609899</td>\n",
              "      <td>0.821377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Hours</td>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>-1.698285</td>\n",
              "      <td>1.598712</td>\n",
              "      <td>0.815669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Hours</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>-2.571081</td>\n",
              "      <td>2.448955</td>\n",
              "      <td>1.249467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Habits</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>-2.114952</td>\n",
              "      <td>1.631117</td>\n",
              "      <td>0.832203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Habits</td>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>-2.057961</td>\n",
              "      <td>1.631844</td>\n",
              "      <td>0.832574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Habits</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>-2.811477</td>\n",
              "      <td>2.388753</td>\n",
              "      <td>1.218751</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Hours and Study Habits</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>-1.822925</td>\n",
              "      <td>1.602896</td>\n",
              "      <td>0.817804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Hours and Study Habits</td>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>-1.754583</td>\n",
              "      <td>1.611691</td>\n",
              "      <td>0.822291</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Direct Effect</td>\n",
              "      <td>Study Hours and Study Habits</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>-2.373297</td>\n",
              "      <td>2.57755</td>\n",
              "      <td>1.315077</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48697504-b685-4507-b7c4-521ead17a286')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-48697504-b685-4507-b7c4-521ead17a286 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-48697504-b685-4507-b7c4-521ead17a286');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 234
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_TE = pd.DataFrame(TE_table)\n",
        "df_TE.columns = df_TE.iloc[0]\n",
        "df_TE = df_TE[1:]\n",
        "df_TE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 187
        },
        "id": "HaA34SDbNFO3",
        "outputId": "239c9ab6-188b-4bf3-8073-5c1f4e69eefc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     Outcome Type of causal effect                Model  Estimate       p/m  \\\n",
              "1  Fall_grade          Total Effect         RandomForest -2.201365  1.669351   \n",
              "2  Fall_grade          Total Effect  Logistic Regression -2.209192  1.635284   \n",
              "3  Fall_grade          Total Effect              XGBoost -1.862314  1.825616   \n",
              "\n",
              "0 Standard Error  \n",
              "1        0.85171  \n",
              "2       0.834328  \n",
              "3       0.931437  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c683a479-783a-4578-a02b-86a3e2568526\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>Type of causal effect</th>\n",
              "      <th>Model</th>\n",
              "      <th>Estimate</th>\n",
              "      <th>p/m</th>\n",
              "      <th>Standard Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Total Effect</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>-2.201365</td>\n",
              "      <td>1.669351</td>\n",
              "      <td>0.85171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Total Effect</td>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>-2.209192</td>\n",
              "      <td>1.635284</td>\n",
              "      <td>0.834328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Total Effect</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>-1.862314</td>\n",
              "      <td>1.825616</td>\n",
              "      <td>0.931437</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c683a479-783a-4578-a02b-86a3e2568526')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c683a479-783a-4578-a02b-86a3e2568526 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c683a479-783a-4578-a02b-86a3e2568526');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 235
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Table of Natural Indirect Effect"
      ],
      "metadata": {
        "id": "UfOktM7Dp_gV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "NIE_table = [['Outcome','Type of causal effect','Through which Mediator', 'Model', 'Estimate'], \n",
        "         ['Fall_grade','Natural Indirect Direct Effect', 'Study Hours', 'RandomForest',tau_hat_RFTE - tau_hat_RFSH], \n",
        "         ['Fall_grade','Natural Indirect Direct Effect', 'Study Hours', 'Logistic Regression',tau_hat_LRTE - tau_hat_LRSH],\n",
        "         ['Fall_grade','Natural Indirect Direct Effect', 'Study Hours', 'XGBoost',tau_hat_XGTE - tau_hat_XGSH],\n",
        "         ['Fall_grade','Natural Indirect Direct Effect', 'Study Habits', 'RandomForest',tau_hat_RFTE - tau_hat_RFSB], \n",
        "         ['Fall_grade','Natural Indirect Direct Effect', 'Study Habits', 'Logistic Regression',tau_hat_LRTE - tau_hat_LRSB],\n",
        "         ['Fall_grade','Natural Indirect Direct Effect', 'Study Habits', 'XGBoost',tau_hat_XGTE - tau_hat_XGSB]]"
      ],
      "metadata": {
        "id": "-rc9niODqHkM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_NIE = pd.DataFrame(NIE_table)\n",
        "df_NIE.columns = df_NIE.iloc[0]\n",
        "df_NIE = df_NIE[1:]\n",
        "df_NIE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "mYAqYQOFrLwU",
        "outputId": "85e4ce2a-f357-4be8-8f71-f01e3f0981a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     Outcome           Type of causal effect Through which Mediator  \\\n",
              "1  Fall_grade  Natural Indirect Direct Effect            Study Hours   \n",
              "2  Fall_grade  Natural Indirect Direct Effect            Study Hours   \n",
              "3  Fall_grade  Natural Indirect Direct Effect            Study Hours   \n",
              "4  Fall_grade  Natural Indirect Direct Effect           Study Habits   \n",
              "5  Fall_grade  Natural Indirect Direct Effect           Study Habits   \n",
              "6  Fall_grade  Natural Indirect Direct Effect           Study Habits   \n",
              "\n",
              "0                Model  Estimate  \n",
              "1         RandomForest -0.364112  \n",
              "2  Logistic Regression -0.510907  \n",
              "3              XGBoost  0.708768  \n",
              "4         RandomForest -0.086413  \n",
              "5  Logistic Regression -0.151231  \n",
              "6              XGBoost  0.949163  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-636e984b-e8e8-49cf-8cac-3e21af872587\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>Type of causal effect</th>\n",
              "      <th>Through which Mediator</th>\n",
              "      <th>Model</th>\n",
              "      <th>Estimate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Indirect Direct Effect</td>\n",
              "      <td>Study Hours</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>-0.364112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Indirect Direct Effect</td>\n",
              "      <td>Study Hours</td>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>-0.510907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Indirect Direct Effect</td>\n",
              "      <td>Study Hours</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>0.708768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Indirect Direct Effect</td>\n",
              "      <td>Study Habits</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>-0.086413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Indirect Direct Effect</td>\n",
              "      <td>Study Habits</td>\n",
              "      <td>Logistic Regression</td>\n",
              "      <td>-0.151231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>Natural Indirect Direct Effect</td>\n",
              "      <td>Study Habits</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>0.949163</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-636e984b-e8e8-49cf-8cac-3e21af872587')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-636e984b-e8e8-49cf-8cac-3e21af872587 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-636e984b-e8e8-49cf-8cac-3e21af872587');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 237
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Table of Sanity checks results "
      ],
      "metadata": {
        "id": "mswUpixaQNVa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "San_table = [['Outcome','Mediators','Model','Q model MSE','Q model baseline','g model CE','g model baseline'],\n",
        "             ['Fall_grade', 'none', 'RandomForest', test_mse_RF0, baseline_mse_0, test_ce_RF0, baseline_ce_0],\n",
        "             ['Fall_grade', 'none', 'LogisticRegression', test_mse_LR0, baseline_mse_0, test_ce_LR0, baseline_ce_0],\n",
        "             ['Fall_grade', 'none', 'XGBoost', test_mse_XGB0, baseline_mse_0, test_ce_XGB0, baseline_ce_0],\n",
        "             ['Fall_grade', 'both', 'RandomForest', test_mse_RF1, baseline_mse_1, test_ce_RF1, baseline_ce_1],\n",
        "             ['Fall_grade', 'both', 'LogisticRegression', test_mse_LR1, baseline_mse_1, test_ce_LR1, baseline_ce_1],\n",
        "             ['Fall_grade', 'both', 'XGboost', test_mse_XGB1, baseline_mse_1, test_ce_XGB1, baseline_ce_1],\n",
        "             ['Fall_grade', 'StudyHours', 'RandomForest', test_mse_RF2, baseline_mse_2, test_ce_RF2, baseline_ce_2],\n",
        "             ['Fall_grade', 'StudyHours', 'LogisticRegression', test_mse_LR2, baseline_mse_2, test_ce_LR2, baseline_ce_2],\n",
        "             ['Fall_grade', 'StudyHours', 'XGBoost', test_mse_XGB2, baseline_mse_2, test_ce_XGB2, baseline_ce_2],\n",
        "             ['Fall_grade', 'StudyHabits', 'RandomForest', test_mse_RF3, baseline_mse_3, test_ce_RF3, baseline_ce_3],\n",
        "             ['Fall_grade', 'StudyHabits', 'LogisticRegression', test_mse_LR3, baseline_mse_3, test_ce_LR3, baseline_ce_3],\n",
        "             ['Fall_grade', 'StudyHabits', 'XGBoost', test_mse_XGB3, baseline_mse_3, test_ce_XGB3, baseline_ce_3],\n",
        "             \n",
        "             ]"
      ],
      "metadata": {
        "id": "qs7MclLts7mV"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_san = pd.DataFrame(San_table)\n",
        "df_san.columns = df_san.iloc[0]\n",
        "df_san = df_san[1:]\n",
        "df_san"
      ],
      "metadata": {
        "id": "XbtJoPgSQRu8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "outputId": "5920431b-6940-47d9-9faa-7d394c1f5e44"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      Outcome    Mediators               Model Q model MSE Q model baseline  \\\n",
              "1   Fall_grade         none        RandomForest  152.611823       151.601951   \n",
              "2   Fall_grade         none  LogisticRegression   149.51816       151.601951   \n",
              "3   Fall_grade         none             XGBoost  157.875933       151.601951   \n",
              "4   Fall_grade         both        RandomForest  169.400559       182.096039   \n",
              "5   Fall_grade         both  LogisticRegression  168.510748       182.096039   \n",
              "6   Fall_grade         both             XGboost  181.723137       182.096039   \n",
              "7   Fall_grade   StudyHours        RandomForest  121.740535       130.438943   \n",
              "8   Fall_grade   StudyHours  LogisticRegression  121.582864       130.438943   \n",
              "9   Fall_grade   StudyHours             XGBoost  127.014899       130.438943   \n",
              "10  Fall_grade  StudyHabits        RandomForest  146.637146        149.82793   \n",
              "11  Fall_grade  StudyHabits  LogisticRegression  160.548133        149.82793   \n",
              "12  Fall_grade  StudyHabits             XGBoost  155.398148        149.82793   \n",
              "\n",
              "0  g model CE g model baseline  \n",
              "1    0.696954         0.692866  \n",
              "2    0.690182         0.692866  \n",
              "3    0.714846         0.692866  \n",
              "4    0.682537         0.693418  \n",
              "5    0.677284         0.693418  \n",
              "6    0.711953         0.693418  \n",
              "7    0.688138         0.693117  \n",
              "8    0.690446         0.693117  \n",
              "9    0.707408         0.693117  \n",
              "10   0.692113         0.692866  \n",
              "11   0.693429         0.692866  \n",
              "12   0.708847         0.692866  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af612394-388a-4a83-a0b7-3280c6c16e5c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Outcome</th>\n",
              "      <th>Mediators</th>\n",
              "      <th>Model</th>\n",
              "      <th>Q model MSE</th>\n",
              "      <th>Q model baseline</th>\n",
              "      <th>g model CE</th>\n",
              "      <th>g model baseline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>none</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>152.611823</td>\n",
              "      <td>151.601951</td>\n",
              "      <td>0.696954</td>\n",
              "      <td>0.692866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>none</td>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>149.51816</td>\n",
              "      <td>151.601951</td>\n",
              "      <td>0.690182</td>\n",
              "      <td>0.692866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>none</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>157.875933</td>\n",
              "      <td>151.601951</td>\n",
              "      <td>0.714846</td>\n",
              "      <td>0.692866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>both</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>169.400559</td>\n",
              "      <td>182.096039</td>\n",
              "      <td>0.682537</td>\n",
              "      <td>0.693418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>both</td>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>168.510748</td>\n",
              "      <td>182.096039</td>\n",
              "      <td>0.677284</td>\n",
              "      <td>0.693418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>both</td>\n",
              "      <td>XGboost</td>\n",
              "      <td>181.723137</td>\n",
              "      <td>182.096039</td>\n",
              "      <td>0.711953</td>\n",
              "      <td>0.693418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>StudyHours</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>121.740535</td>\n",
              "      <td>130.438943</td>\n",
              "      <td>0.688138</td>\n",
              "      <td>0.693117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>StudyHours</td>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>121.582864</td>\n",
              "      <td>130.438943</td>\n",
              "      <td>0.690446</td>\n",
              "      <td>0.693117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>StudyHours</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>127.014899</td>\n",
              "      <td>130.438943</td>\n",
              "      <td>0.707408</td>\n",
              "      <td>0.693117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>StudyHabits</td>\n",
              "      <td>RandomForest</td>\n",
              "      <td>146.637146</td>\n",
              "      <td>149.82793</td>\n",
              "      <td>0.692113</td>\n",
              "      <td>0.692866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>StudyHabits</td>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>160.548133</td>\n",
              "      <td>149.82793</td>\n",
              "      <td>0.693429</td>\n",
              "      <td>0.692866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Fall_grade</td>\n",
              "      <td>StudyHabits</td>\n",
              "      <td>XGBoost</td>\n",
              "      <td>155.398148</td>\n",
              "      <td>149.82793</td>\n",
              "      <td>0.708847</td>\n",
              "      <td>0.692866</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af612394-388a-4a83-a0b7-3280c6c16e5c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-af612394-388a-4a83-a0b7-3280c6c16e5c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-af612394-388a-4a83-a0b7-3280c6c16e5c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "collapsed_sections": [
        "ALvKeOdnG2Cb"
      ]
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
